# ANOTHER HACK: Milo needs replicates, we simply produce those synthetically and make up random values for 3 replicates for each condition
#create synthetic replicates for statistical testing
x <- sample(1:3, nrow(week0) , replace=T) # For baseline cells
y <- sample(4:6, nrow(week3), replace=T) # For 3-week cells
# Create a SingleCellExperiment object
sce <- SingleCellExperiment(assays = list(intensities = as.matrix(combined_data_metaolic_space_t)))
colData_sce <- DataFrame(row.names=colnames(combined_data_metaolic_space_t),cell_id = colnames(combined_data_metaolic_space_t), Group = c(rep("Baseline",nrow(week0)),rep("Induced cells",nrow(week3))), replicate_id = c(x,y),State=combined_labels)
colData(sce) = colData_sce
#WE USE UMAP ONLY FOR VISUALIZATION: FOR THE SPACE IN WHICH WE APPLY MILO WE WANT TO USE ETHER PCA(and use all dimensons)
# or we use a small hack here and actually input the origional data, acting like it is some reduced dimension...
reducedDim(sce, "TRUE_VALUES") <- as.matrix(combined_data_metaolic_space)
head(reducedDim(sce, "TRUE_VALUES"))
# Add UMAP data: ONLY FOR VISUALIZATION, look at parameter d in functions below, we want to use ALL DIMENSIONS there and not only the 2 UMAP dimensions
sce <- runUMAP(sce,exprs_values = "intensities",name = "UMAP")
# Create a Milo object
#______________
sce <- Milo(sce)
# Construct KNN graph
sce <- buildGraph(sce, k=30, d=length(metabolic_space), reduced.dim = "TRUE_VALUES")
# Defining representative neighbourhoods on the KNN graph
sce <- makeNhoods(sce, prop = 1, k=30, d=length(metabolic_space), refined = TRUE, reduced_dims = "TRUE_VALUES")
plotNhoodSizeHist(sce)
# Counting cells in neighbourhoods
sce <- countCells(sce, meta.data = data.frame(colData(sce)), sample="replicate_id")
head(nhoodCounts(sce))
# Defining experimental design(
sce_design <- data.frame(colData(sce))[,c("Group","replicate_id"),drop=FALSE]
# Convert batch info from integer to factor
sce_design$Group <- as.factor(sce_design$Group)
sce_design <- distinct(sce_design)
rownames(sce_design) <- sce_design$replicate_id
sce_design
# Computing neighbourhood connectivity
sce <- calcNhoodDistance(sce, d=10, reduced.dim = "TRUE_VALUES")
# Testing
da_results <- testNhoods(sce, design = ~ Group, design.df = sce_design, reduced.dim = "TRUE_VALUES")
# Check the distribution of p-value
ggplot(da_results, aes(PValue))+ geom_histogram(bins=50)
# Visualize the FDR results with a volcano plot
ggplot(da_results, aes(logFC, -log10(SpatialFDR))) +
geom_point(alpha=0.7) +
geom_hline(yintercept = 1)
# Visualize the p-value results with a volcano plot
ggplot(da_results, aes(logFC, -log10(PValue))) +
geom_point(alpha=7) +
geom_hline(yintercept = 1)
#PLOT RESULTS
#______________
sce <- buildNhoodGraph(sce)
## Plot single-cell UMAP
umap_pl <- plotReducedDim(sce, dimred = "UMAP", colour_by="Group",
text_size = 3, point_size=0.5) +
guides(fill="none")
## Plot neighbourhood graph
nh_graph_pl <- plotNhoodGraphDA(sce, da_results, layout="UMAP",alpha=0.1)
umap_pl + nh_graph_pl +
plot_layout(guides="collect")
# Assign a cell type label to each neighbourhood by finding the most abundant cell type within cells in each neighbourhood
da_results <- annotateNhoods(sce, da_results, coldata_col = "State")
head(da_results)
# Visualize the distribution of DA Fold Changes in different cell types
ggplot(da_results, aes(State_fraction)) + geom_histogram(bins=50)
# Exclude neighbourhoods that are a mix of cell types
da_results$celltype <- ifelse(da_results$State_fraction < 0.8, "Mixed", da_results$State)
# Visualize the distribution of DA Fold Changes in different cell types
plotDAbeeswarm(da_results, group.by = "State")
# Identifying signatures of DA subpopulations
dge_smp <- findNhoodMarkers(sce, da_results,
assay = "intensities", gene.offset = FALSE, da.fdr = 0.1,
aggregate.samples = FALSE,
subset.nhoods = da_results$State %in% c("Exhausted","Functional")
)
head(dge_smp)
markers <- dge_smp[which(dge_smp$adj.P.Val_1 < 0.1 ), "GeneID"]
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
# Load data
combined_data=read.csv("FinalProcessed_CD4+_CD8+/Final_Processed_Data_sub.csv"
,row.names = 1,header = TRUE)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
D
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA
getAnywhere("plotNhoodExpressionDA")
find("plotNhoodExpressionDA")
.libPaths("miloR")
aa= function (x, da.res, features, alpha = 0.1, subset.nhoods = NULL,
cluster_features = FALSE, assay = "logcounts", scale_to_1 = FALSE,
show_rownames = TRUE, highlight_features = NULL)
{
if (length(features) <= 0 | is.null(features)) {
stop("features is empty")
}
if (!all(features %in% rownames(x))) {
stop("Some features are not in rownames(x)")
}
if (dim(nhoodExpression(x))[2] == 1) {
warning("Nothing in nhoodExpression(x): computing for requested features...")
x <- calcNhoodExpression(x, assay = assay, subset.row = features)
}
if (!all(features %in% rownames(nhoodExpression(x)))) {
warning("Not all features in nhoodExpression(x): recomputing for requested features...")
x <- calcNhoodExpression(x, assay = assay, subset.row = features)
}
expr_mat <- nhoodExpression(x)[features, ]
colnames(expr_mat) <- seq_len(ncol(nhoods(x)))
if (!is.null(subset.nhoods)) {
expr_mat <- expr_mat[, subset.nhoods, drop = FALSE]
}
if (!isFALSE(scale_to_1)) {
expr_mat <- t(apply(expr_mat, 1, function(X) (X - min(X))/(max(X) -
min(X))))
if (sum(is.na(expr_mat)) > 0) {
warning("NA values found - resetting to 0")
expr_mat[is.na(expr_mat)] <- 0
}
}
rownames(expr_mat) <- sub(pattern = "-", replacement = ".",
rownames(expr_mat))
pl_df <- data.frame(t(expr_mat)) %>% rownames_to_column("Nhood") %>%
mutate(Nhood = as.double(Nhood)) %>% left_join(da.res,
by = "Nhood") %>% mutate(logFC_rank = percent_rank(logFC))
pl_top <- pl_df %>% mutate(is_signif = ifelse(SpatialFDR <
alpha, paste0("SpatialFDR < ", alpha), NA)) %>% ggplot(aes(logFC_rank,
logFC)) + geom_hline(yintercept = 0, linetype = 2) +
geom_point(size = 0.2, color = "grey") + geom_point(data = . %>%
filter(!is.na(is_signif)), aes(color = is_signif), size = 1) +
theme_bw(base_size = 16) + ylab("DA logFC") + scale_color_manual(values = "red",
name = "") + scale_x_continuous(expand = c(0.01, 0)) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.x = element_blank())
if (isTRUE(cluster_features)) {
row.order <- hclust(dist(expr_mat))$order
ordered_features <- rownames(expr_mat)[row.order]
}
else {
ordered_features <- rownames(expr_mat)
}
rownames(expr_mat) <- str_replace(rownames(expr_mat), pattern = "(^[0-9]+)",
replacement = "X\\1")
pl_df <- pl_df %>% pivot_longer(cols = rownames(expr_mat),
names_to = "feature", values_to = "avg_expr") %>% mutate(feature = factor(feature,
levels = ordered_features))
if (!is.null(highlight_features)) {
if (!all(highlight_features %in% pl_df$feature)) {
missing <- highlight_features[which(!highlight_features %in%
pl_df$feature)]
warning("Some elements of highlight_features are not in features and will not be highlighted. \nMissing features: ",
paste(missing, collapse = ", "))
}
pl_df <- pl_df %>% mutate(label = ifelse(feature %in%
highlight_features, as.character(feature), NA))
}
pl_bottom <- pl_df %>% ggplot(aes(logFC_rank, feature, fill = avg_expr)) +
geom_tile() + scale_fill_viridis_c(option = "magma",
name = "Avg.Expr.") + xlab("Neighbourhoods") + ylab("Features") +
scale_x_continuous(expand = c(0.01, 0)) + theme_classic(base_size = 16) +
coord_cartesian(clip = "off") + theme(axis.text.x = element_blank(),
axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.line.y = element_blank(), axis.ticks.y = element_blank(),
panel.spacing = margin(2, 2, 2, 2, "cm"), legend.margin = margin(0,
0, 0, 0), legend.box.margin = margin(10, 10, 10,
10))
if (!is.null(highlight_features)) {
pl_bottom <- pl_bottom + geom_text_repel(data = . %>%
filter(!is.na(label)) %>% group_by(label) %>% summarise(logFC_rank = max(logFC_rank),
avg_expr = mean(avg_expr), feature = first(feature)),
aes(label = label, x = logFC_rank), size = 4, xlim = c(max(pl_df$logFC_rank) +
0.01, max(pl_df$logFC_rank) + 0.02), min.segment.length = 0,
max.overlaps = Inf, seed = 42)
}
if (isFALSE(show_rownames)) {
pl_bottom <- pl_bottom + theme(axis.text.y = element_blank())
}
(pl_top/pl_bottom) + plot_layout(heights = c(1, 4), guides = "collect") &
theme(legend.justification = c(0, 1), legend.margin = margin(0,
0, 0, 50))
}
aa(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = markers,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
help(plotNhoodExpressionDA)
.libPaths(miloR)
.libPaths("miloR")
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TURE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TURE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = FALSE, cluster_features = TRUE
)
plotNhoodExpressionDA(sce, da_results, features = metabolic_space,
subset.nhoods = da_results$State %in% c("Exhausted","Functional"),
assay="intensities",
scale_to_1 = TRUE, cluster_features = TRUE
)
